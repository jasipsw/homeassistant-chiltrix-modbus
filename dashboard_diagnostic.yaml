title: CX Diagnostic Dashboard
views:
  - title: Sensor Values
    cards:
      - type: markdown
        title: "📊 CX50 Modbus Registers"
        content: |
          {% set register_map = {
            'sensor.cx50_inlet_water_temp_c': 202,
            'sensor.cx50_outlet_water_temp_c': 203,
            'sensor.cx50_ambient_temp_c': 204,
            'sensor.cx50_coil_temp_c': 205,
            'sensor.cx50_discharge_temp_c': 206,
            'sensor.cx50_suction_temp_c': 207,
            'sensor.cx50_setpoint_temp_c': 209,
            'sensor.cx50_dhw_setpoint_c': 213,
            'sensor.cx50_antifreeze_temp_c': 214,
            'sensor.cx50_operating_mode': 243,
            'sensor.cx50_error_code': 244,
            'sensor.cx50_input_ac_voltage': 256,
            'sensor.cx50_input_ac_current': 256,
            'sensor.cx50_pump_flow_lpm': 257,
            'sensor.cx50_compressor_frequency': 258,
            'sensor.cx50_c45_ec_fan_motor_1_speed': 259,
            'sensor.cx50_c46_ec_fan_motor_2_speed': 259,
            'sensor.cx50_pump_speed': 260,
            'sensor.cx50_system_pressure': 261,
            'sensor.cx50_total_run_hours': 264,
            'sensor.cx50_compressor_starts': 281,
            'sensor.cx50_defrost_count': 285,
            'sensor.cx50_silent_mode': 262,
            'sensor.cx50_dhw_priority': 263,
            'sensor.cx50_defrost_active': 5,
            'sensor.cx50_pump_enabled': 6
          } %}

          {% set pattern = 'sensor.cx50' %}
          {% set matching_sensors = states.sensor | selectattr('entity_id', 'match', pattern) | list %}

          {% if matching_sensors %}
          ## CX50 Modbus Sensors ({{ matching_sensors | count }} total)

          {% for sensor in matching_sensors | sort(attribute='entity_id') %}
          **{{ sensor.name }}**
          - Entity ID: `{{ sensor.entity_id }}`
          - Register: `{{ register_map.get(sensor.entity_id, 'Unknown') }}` (0x{{ '%X' % register_map.get(sensor.entity_id, 0) if register_map.get(sensor.entity_id) else '??' }})
          - Value: **{{ sensor.state }}** {{ sensor.attributes.unit_of_measurement if sensor.attributes.unit_of_measurement is defined else '' }}
          - State Class: {{ sensor.attributes.state_class if sensor.attributes.state_class is defined else 'N/A' }}

          {% endfor %}
          {% else %}
          No CX50 sensors found.
          {% endif %}

      - type: markdown
        title: "🔍 Temperature Sensors (Modbus)"
        content: |
          **Inlet:** {{ states('sensor.cx50_inlet_water_temp_c') }}°C
          **Outlet:** {{ states('sensor.cx50_outlet_water_temp_c') }}°C
          **Ambient:** {{ states('sensor.cx50_ambient_temp_c') }}°C

      - type: markdown
        title: "⚡ Electrical Sensors (Modbus)"
        content: |
          **Voltage:** {{ states('sensor.cx50_input_ac_voltage') }}V
          **Current:** {{ states('sensor.cx50_input_ac_current') }}A
          **Compressor Frequency:** {{ states('sensor.cx50_compressor_frequency') }}Hz

      - type: markdown
        title: "💧 Flow Sensors (Modbus)"
        content: |
          **Flow Rate:** {{ states('sensor.cx50_pump_flow_lpm') }} L/min
          **Operating Mode:** {{ states('sensor.cx50_operating_mode') }} (raw)

      - type: markdown
        title: "🌀 Fan Sensors (Modbus)"
        content: |
          **Fan 1 Speed:** {{ states('sensor.cx50_c45_ec_fan_motor_1_speed') }}
          **Fan 2 Speed:** {{ states('sensor.cx50_c46_ec_fan_motor_2_speed') }}

      - type: markdown
        title: "🔢 Calculated Template Sensors"
        content: |
          **Operating Mode Text:** {{ states('sensor.cx_operating_mode') }}
          **Temperature Delta:** {{ states('sensor.cx_water_temperature_delta') }}{{ state_attr('sensor.cx_water_temperature_delta', 'unit_of_measurement') }}
          **Electrical Power Input:** {{ states('sensor.cx_electrical_power_input') }}W ({{ states('sensor.cx_electrical_power_input_kw') }}kW)
          **Thermal Power Output:** {{ states('sensor.cx_thermal_power_output') }}W ({{ states('sensor.cx_thermal_power_output_kw') }}kW)
          **COP:** {{ states('sensor.cx_cop') }}
          **COP Heating:** {{ states('sensor.cx_cop_heating_mode') }}
          **COP Cooling:** {{ states('sensor.cx_cop_cooling_mode') }}
          **COP DHW:** {{ states('sensor.cx_cop_dhw_mode') }}
          **Efficiency Rating:** {{ states('sensor.cx_efficiency_rating') }}
          **Compressor Speed:** {{ states('sensor.cx_compressor_speed_2') }}%
          **Fan Speed:** {{ states('sensor.cx_fan_speed_2') }}%

      - type: markdown
        title: "⚙️ Helper Inputs"
        content: |
          **Fluid Density:** {{ states('input_number.cx_fluid_density') }} kg/m³
          **Fluid Specific Heat:** {{ states('input_number.cx_fluid_specific_heat') }} kJ/(kg·°C)

      - type: markdown
        title: "📊 Calculated Values (Manual Check)"
        content: |
          **Power Calc (V×I):** {{ (states('sensor.cx50_input_ac_voltage')|float * states('sensor.cx50_input_ac_current')|float)|round(0) }}W
          **Temp Delta Calc:** {{ (states('sensor.cx50_outlet_water_temp_c')|float - states('sensor.cx50_inlet_water_temp_c')|float)|round(2) }}°C
          **COP Calc:** {{ (states('sensor.cx_thermal_power_output')|float / states('sensor.cx_electrical_power_input')|float)|round(2) if states('sensor.cx_electrical_power_input')|float > 0 else 'N/A' }}
          **Fan Avg Calc:** {{ ((states('sensor.cx50_c45_ec_fan_motor_1_speed')|float + states('sensor.cx50_c46_ec_fan_motor_2_speed')|float) / 2 / 10)|round(1) }}%
